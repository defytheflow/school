#!/bin/bash

# Options:

# -m
MAKEFILE_FLAG=0
MAKEFILE="Makefile"
# -v
VERBOSE_FLAG=0

# Commands:

# begin
BEGIN_FLAG=0
# end
END_FLAG=0

MAX_LESSON_NUM=100
LESSONS_DIR="Lessons"
LESSON_DIRECTORIES=(Examples Exercises Theory Whiteboard Programs Homework Todo)

# How to use this script
usage() {
    echo "Generates a default directory structure for a lesson."
    echo ""
    echo "Usage:"
    echo "  lesson [-h] [-m] [-v] <command> <lesson_num>"
    echo ""
    echo "Options:"
    echo "  -h       displays a help message"
    echo "  -m       generate a generic makefile for c programs inside of"
    echo "           each directory"
    echo "  -v       displays what directories are being created"
    echo ""
    echo "Commands:"
    echo "  begin    creates the directories for the lesson"
    echo "  end      removes unused directories for the lesson"
    echo "  help     displays a help message"
    echo ""
    echo "Examples:"
    echo "  lesson begin 1"
    echo "  lesson end 1"
    echo ""
}

# Creates a generic makefile for a C program in $1 directory
generate_makefile() {
    echo "# Generic C Makefile" >> $1/$MAKEFILE
    echo "" >> $1/$MAKEFILE
    echo "C_FLAGS=-g -O0 -Wall -Wextra -Werror -Wpedantic -std=c11" >> $1/$MAKEFILE
    echo "" >> $1/$MAKEFILE
    echo "%: %.c" >> $1/$MAKEFILE
    echo -e '\tgcc $^ $(C_FLAGS) -o $@' >> $1/$MAKEFILE
}

# Parse Options
while getopts ":hmv" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        m)
            MAKEFILE_FLAG=1
            ;;
        v)
            VERBOSE_FLAG=1
            ;;
        *)
            usage
            echoerr "Error: unknown option '$opt'"
            exit 1
            ;;
    esac
done

# Shift parsed options
shift $((OPTIND - 1))

# Check the <command> and <lesson_num> arguments are given
if [[ $# -lt 2 ]]; then
    usage
    echoerr "Error: missing <command> <lesson_num> arguments"
    exit 1
fi

# Check the <command> argument is valid
case $1 in
    begin)
        BEGIN_FLAG=1
        shift 1
        ;;
    end)
        END_FLAG=1
        shift 1
        ;;
    help)
        usage
        exit 0
        ;;
    *)
        usage
        echoerr "Error: unknown command '$COMMAND'"
        exit 1
        ;;
esac

# Check if <lesson_num> argument is a positive number
if ! isuint $1; then
    echoerr "Error: <lesson_num> argument must be an integer"
    echoerr "Fix: Try 1..$MAX_LESSON_NUM"
    exit 1
fi

# Check if <lesson_num> argument is less than or equal MAX_LESSON_NUM
if [[ ! "$1" -le $MAX_LESSON_NUM ]]; then
    echo "$1 exceeds the MAX_LESSON_NUM"
    echo -n "Proceed? [y/n]: "
    read ans
    if ! isyes $ans; then
        exit 0
    fi
fi

# Check if inside of LESSONS_DIR directory
if [[ ! "$(pwd)" =~ .+/$LESSONS_DIR$ ]]; then
    echo "Not inside '$LESSONS_DIR' directory"
    echo -n "Proceed? [y/n]: "
    read ans
    if ! isyes $ans; then
        exit 0
    fi
fi

if [[ $BEGIN_FLAG -eq 1 ]]; then

    # Check if there is a Lesson with number <lesson_num>
    if [[ -d $1 ]]; then
        echoerr "Error: Lesson number '$1' already exists"
        echoerr "Fix: Try another number"
        exit 1
    fi

    # Create the Lesson layout
    for dir in ${LESSON_DIRECTORIES[@]}; do
        mkdir -p $1/$dir
    done

    # Check if $MAKEFILE_FLAG is on
    if [[ $MAKEFILE_FLAG -eq 1 ]]; then
        # In each $dir create a Makefile
        for dir in ${LESSON_DIRECTORIES[@]}; do
            generate_makefile $1/$dir
        done
    fi

    # Begin screen
    echo -e "Welcome to Lesson #$1, $USERNAME!\n"
    echo -e "Remember to express your ideas:\n"
    echo -e " 1. Correctly\n"
    echo -e " 2. Simply\n"
    echo -e " 3. Efficiently\n"

elif [[ $END_FLAG -eq 1 ]]; then

    # Chech if there is no lesson with number <lesson_num>
    if [[ ! -d $1 ]]; then
        echoerr "Error: Lesson number '$1' doesn't exist"
        exit 1
    fi

    for dir in ${LESSON_DIRECTORIES[@]}; do
        # If $dir exists and $dir is empty
        if [[ -d $1/$dir ]] && isempty $1/$dir; then
            rm -r $1/$dir
        # If $dir only has a $MAKEFILE inside
        elif [[ -f $1/$dir/$MAKEFILE && $(filenum $1/$dir) -eq 1 ]]; then
            rm -r $1/$dir
        fi
    done

    # End screen
    echo "End of lesson #$1. Goodbye, $USERNAME!"
fi

exit 0
