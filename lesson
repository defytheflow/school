#!/bin/bash

BASH_LIB=$HOME/.bash_lib
BASH_LIB_REP="https://github.com/defytheflow/dotfiles.git"

MAX_LESSON_NUM=100 
LESSONS_DIR="Lessons"

# How to use this script
usage() {
	echo "Generates a default directory structure for a lesson."
	echo ""
	echo "Usage:"
	echo "  lesson [options] <num>"
	echo ""
	echo "Options:"
	echo "  -h, --help    shows a help message" 
	echo ""
	echo "Dependencies:"
	echo "  bash_lib"
	echo "  figlet"
	echo "  lolcat"
}

# Download BASH_LIB and move to home directory
download_bash_lib() {
	git clone $BASH_LIB_REP > /dev/null 2>&1
	mv dotfiles/.bash_lib $HOME/
	rm -rf dotfiles
}

# Try to import code from ~/.bash_lib file
if [[ -f $BASH_LIB ]]; then

	# Check if $BASH_LIB is up-to-date
	if [[ $0 -nt $BASH_LIB ]]; then
		echo "You might need to update the $BASH_LIB file"
		
		echo -n "Update now? [y/n] "
		read ANS
		if [[ "$ANS" =~ ^[yY][eE]?[sS]? ]]; then
			download_bash_lib
			echo "Update complete. Please run again."
			exit 0
		else	
			. $BASH_LIB
		fi

	else
		. $BASH_LIB
	fi 
else
	echo "Unable to find '$BASH_LIB' file."
	
	# Ask if user wants to download the .bash_lib file
	echo -n "Download now? [y/n] "
	read ANS
	if [[ ! "$ANS" =~ ^[yY][eE]?[sS]? ]]; then
		exit 0;
	fi

	# Check if git is installed
	if [[ ! -x "$(command -v git)" ]]; then
		error "$(reversed git) is not installed."
		ask "Install now"
		sudo apt-get install git > /dev/null 2>&1
	fi

	download_bash_lib
	echo "Download complete. Please run again."
	exit 0
fi

# Check if an option was provided
for arg in $@; do
	if [[ "$arg" =~ ^-[-]?[a-zA-Z]+$ ]]; then
		case $arg in 
			-h | --help )
				usage
				exit 0
				;;
			* )
				fatal_error "Unknown option $(reversed $arg)"
				;;
		esac
	fi	   
done

# Check if <num> argument was given
if [[ $# -lt 1 ]]; then
	usage
	echo ""
	fatal_error "Missing <num> argument"
fi

# Check if <num> argument is an integer
if [[ ! "$1" =~ ^[0-9]+$ ]]; then
	fatal_error "<num> argument must be an integer"
fi

# Check if <num> argument is less than or equal MAX_LESSON_NUM
if [[ ! "$1" -le $MAX_LESSON_NUM ]]; then
	warning "$1 exceed the MAX_LESSON_NUM"
	ask "Proceed"
fi

# Check if there is already a Lesson with number <num>
if [[ -d $1 ]]; then
	fatal_error "Lesson number $(reversed $1) already exists"
fi

# Check if inside of LESSONS_DIR directory
if [[ ! "$(pwd)" =~ .+/$LESSONS_DIR$ ]]; then
	warning "Not inside $(reversed $LESSONS_DIR) directory"
	ask "Proceed"
fi
# Check if figlet program is installed
if [[ ! -x "$(command -v figlet)" ]]; then
	error "$(reversed "figlet") is not installed."
	ask "Install now"
	sudo apt-get install figlet > /dev/null 2>&1
fi

# Check if lolcat program is installed
if [[ ! -x "$(command -v lolcat)" ]]; then
	error "$(reversed "lolcat") is not installed."
	ask "Install now"
	sudo apt-get install lolcat > /dev/null 2>&1
fi

# Create the Lesson layout
mkdir $1
mkdir $1/Examples
mkdir $1/Exercises
mkdir $1/Theory
mkdir $1/Whiteboard
mkdir $1/Programs
mkdir $1/Homework

figlet -c "$(whoami) Lesson $1" | lolcat

exit 0
