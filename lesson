#!/bin/bash

# Options:

# -f
FORCE_FLAG=0
# -m
MAKEFILE_FLAG=""
MAKEFILE="Makefile"

# Commands:

# begin
BEGIN_FLAG=0
# end
END_FLAG=0

MAX_LESSON_NUM=100
LESSONS_DIR="Lessons"
LESSON_DIRECTORIES=(Examples Exercises Theory Whiteboard Programs Homework Todo)

HELP_MESSAGE="Try: 'lesson -h | --help' for more information"

# How to use this script
usage() {
    echo -e "Generates a default directory structure for a lesson.\n"
    echo "Usage:"
    echo -e "  lesson [options] <command> <lesson_num>\n"
    echo "Arguments:"
    echo "  command                     name of the command"
    echo "  lesson_num                  the lesson number"
    echo ""
    echo "Options:"
    echo "  -f, --force                 disable warnings"
    echo "  -h, --help                  displays a usage message"
    echo "  -m <lang>, --make <lang>    creates a makefile inside of each directory"
    echo ""
    echo "Commands:"
    echo "  begin                       creates the directories for the lesson"
    echo "  end                         removes unused directories for the lesson"
    echo "  help                        displays a help message"
    echo ""
    echo "Examples:"
    echo "  lesson begin 1"
    echo "  lesson end 1"
    echo ""
}

# Parse Options
short_options="fhm:"
long_options="force,help,make:"

options=$(getopt -o $short_options -l $long_options -- "$@")

if [[ $? -ne 0 ]]; then
    echoerr $HELP_MESSAGE
    exit 1
fi

eval set -- "$options"  # sets $options as sccript arguments

while true; do
    case $1 in
        -f | --force)
            FORCE_FLAG=1 ;;
        -h | --help)
            usage
            exit 0
            ;;
        -m | --make)
            shift
            if [[ $1 == "c" || $1 == "cpp" ]]; then
                MAKEFILE_FLAG=$1
            else
                echoerr "Error: '$1' makefile is not supported."
                echoerr "Supported makefiles: c, cpp"
                echoerr $HELP_MESSAGE
                exit 1
            fi
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done

# Check the <command> and <lesson_num> arguments are given
if [[ $# -lt 2 ]]; then
    echoerr "Error: missing <command> <lesson_num> arguments"
    echoerr $HELP_MESSAGE
    exit 1
fi

# Check the <command> argument is valid
case $1 in
    begin)
        BEGIN_FLAG=1
        shift 1
        ;;
    end)
        END_FLAG=1
        shift 1
        ;;
    help)
        usage
        exit 0
        ;;
    *)
        echoerr "Error: unknown command '$1'"
        echoerr $HELP_MESSAGE
        exit 1
        ;;
esac

# Check if <lesson_num> argument is a positive number
if ! isuint $1; then
    echoerr "Error: <lesson_num> argument must be an integer"
    echoerr "Fix: Try 1..$MAX_LESSON_NUM"
    exit 1
fi

# Check if <lesson_num> argument is less than or equal MAX_LESSON_NUM
if [[ ! "$1" -le $MAX_LESSON_NUM ]]; then
    if [[ $FORCE_FLAG -ne 1 ]]; then
        echo "$1 exceeds the MAX_LESSON_NUM"
        echo -n "Proceed? [y/n]: "
        read ans
        if [[ ! "$ans" =~ ^[yY]$ ]]; then
            exit 0
        fi
    fi
fi

# Check if inside of LESSONS_DIR directory
if [[ ! "$(pwd)" =~ .+/$LESSONS_DIR$ ]]; then
    if [[ $FORCE_FLAG -ne 1 ]]; then
        echo "Not inside '$LESSONS_DIR' directory"
        echo -n "Proceed? [y/n]: "
        read ans
        if [[ ! "$ans" =~ ^[yY]$ ]]; then
            exit 0
        fi
    fi
fi

if [[ $BEGIN_FLAG -eq 1 ]]; then

    # Check if there is a Lesson with number <lesson_num>
    if [[ -d $1 ]]; then
        echoerr "Error: Lesson number '$1' already exists"
        echoerr "Fix: Try another number"
        exit 1
    fi

    # Create the Lesson layout
    for dir in ${LESSON_DIRECTORIES[@]}; do
        mkdir -p $1/$dir
    done

    # Check if $MAKEFILE_FLAG is on
    if [[ -n $MAKEFILE_FLAG ]]; then

        # Check that 'new' script is installed
        if [[ ! -x $(command -v new) ]]; then
            echoerr "Error: command not found 'new'"
            echoerr "Fix: run the 'install' script"
            exit 1
        fi

        # In each $dir create a Makefile
        for dir in ${LESSON_DIRECTORIES[@]}; do
            new --make=$MAKEFILE_FLAG $1/$dir/$MAKEFILE
        done
    fi

    # Create a time-stamp file
    touch $1/.lesson_start

    # Print Begin screen
    columns=$(tput cols)
    printf "%0.s-" $(seq 1 $columns)
    echo ""
    echo ""
    echoc "Welcome to Lesson #$1, $(whoami)!"
    echo ""
    echoc "Remember to express your ideas:"
    echo ""
    echoc " 1. Correctly"
    echo ""
    echoc " 2. Simply"
    echo ""
    echoc " 3. Efficiently"
    echo ""
    printf "%0.s-" $(seq 1 $columns)

elif [[ $END_FLAG -eq 1 ]]; then

    # Chech if there is no lesson with number <lesson_num>
    if [[ ! -d $1 ]]; then
        echoerr "Error: Lesson number '$1' doesn't exist"
        exit 1
    fi

    for dir in ${LESSON_DIRECTORIES[@]}; do

        # If $dir exists and $dir is empty
        if [[ -d $1/$dir ]] && isempty $1/$dir; then
            rm -r $1/$dir

        # If $dir only has a $MAKEFILE inside
        elif [[ -f $1/$dir/$MAKEFILE && $(filenum $1/$dir) -eq 1 ]]; then
            rm -r $1/$dir

        fi
    done

    # Collect time-stats
    if [[ -f $1/.lesson_start ]]; then

        duration=$(( $(date +%s) - $(stat -c "%Y" $1/.lesson_start) ))
        hours=$(( duration / 3600 ))
        minutes=$(( duration / 60 - hours * 60))
        seconds=$(( duration % 60 ))

        # Delete a time-stamp file
        rm $1/.lesson_start

    fi

    # Collect file-stats

    exercises_completed=0
    programs_written=0

    for dir in ${LESSON_DIRECTORIES[@]}; do
        if [[ -d $1/$dir ]]; then
            case $dir in
                Exercises)
                    for file in $(ls $1/$dir); do
                        if [[ "$(file $1/$dir/$file)" =~ "C source" ]]; then
                            exercises_completed=$(( exercises_completed + 1 ))
                        elif [[ "$(file $1/$dir/$file)" =~ "Python script" ]]; then
                            exercises_completed=$(( exercises_completed + 1 ))
                        fi
                    done
                    ;;
                Programs)
                    for file in $(ls $1/$dir); do
                        if  [[ "$(file $1/$dir/$file)" =~ "C source" ]]; then
                            programs_written=$(( programs_written + 1))
                        elif [[ "$(file $1/$dir/$file)" =~ "Python script" ]]; then
                            programs_written=$(( programs_written + 1))
                        fi
                    done
                    ;;
            esac
        fi
    done

    # Print End screen
    columns=$(tput cols)
    printf "%0.s-" $(seq 1 $columns)
    echo ""
    echoc "End of lesson #$1. Goodbye, $(whoami)!"
    echo ""
    echoc "Stats:"
    echo ""
    echoc " 1. Lesson took $hours:$minutes:$seconds"
    echo ""
    echoc " 2. Exercises completed: $exercises_completed"
    echo ""
    echoc " 3. Programs written: $programs_written"
    echo ""
    printf "%0.s-" $(seq 1 $columns)

    # If no files were created, remove the lesson dir as well
    if isempty $1; then
        rmdir $1
    fi
fi

exit 0
