#!/bin/bash

INSTALL="install"
BASH_LIB=$HOME/.bash_lib

VERBOSE_FLAG=0

MAX_LESSON_NUM=100
LESSONS_DIR="Lessons"

# How to use this script
usage() {
	echo "Generates a default directory structure for a lesson."
	echo ""
	echo "Usage:"
	echo "  lesson [options] <num>"
	echo ""
	echo "Options:"
	echo "  -h, --help       displays a help message" 
	echo "  -v, --verbose    displays what directories are being created"
	echo ""
	echo "Dependencies:"
	echo "  bash_lib"
	echo "  figlet"
	echo "  lolcat"
}

# Check if $BASH_LIB file is present
if [[ ! -f $BASH_LIB ]]; then
	echo  "Unable to find the '$BASH_LIB' file."
	echo  "Please run the '$INSTALL' script."
	exit 1
fi

# Import code from $BASH_LIB
. $BASH_LIB

# Check if an option was provided
for arg in $@; do
	if [[ "$arg" =~ ^-[-]?[a-zA-Z]+$ ]]; then
		case $arg in 
			-h | --help )
				usage
				exit 0
				;;
			-v | --verbose )
				VERBOSE_FLAG=1
				;;
			* )
				fatal_error "Unknown option $(reversed $arg)"
				;;
		esac
	fi	   
done

# Remove all options to check the required argument
ARGS=($@)
ARGS=(${ARGS[@]/-*/})

# Check the <num> argument
if [[ ${#ARGS[@]} -eq 0 ]]; then
	usage
	echo ""
	fatal_error "Missing <num> argument"
elif [[ ${#ARGS[@]} -gt 1 ]]; then
	usage
	echo ""
	fatal_error "Expected one <num> argument"
fi

NUM=${ARGS[0]}

# Check if <num> argument is an integer
if [[ ! "$NUM" =~ ^[0-9]+$ ]]; then
	fatal_error "<num> argument must be an integer"
fi

# Check if <num> argument is less than or equal MAX_LESSON_NUM
if [[ ! "$NUM" -le $MAX_LESSON_NUM ]]; then
	warning "$1 exceed the MAX_LESSON_NUM"
	ask "Proceed"
fi

# Check if there is already a Lesson with number <num>
if [[ -d $NUM ]]; then
	fatal_error "Lesson number $(reversed $1) already exists"
fi

# Check if inside of LESSONS_DIR directory
if [[ ! "$(pwd)" =~ .+/$LESSONS_DIR$ ]]; then
	warning "Not inside $(reversed $LESSONS_DIR) directory"
	ask "Proceed"
fi

# Check if figlet program is installed
if [[ ! -x "$(command -v figlet)" ]]; then
	error "$(reversed "figlet") is not installed. Please run the '$INSTALL' script"
fi

# Check if lolcat program is installed
if [[ ! -x "$(command -v lolcat)" ]]; then
	error "$(reversed "lolcat") is not installed. Please run the '$INSTALL' script"
fi

# If a non-fatal error occured to this moment - exit
if [[ $NUM_ERRORS -ne 0 ]]; then
	exit 1
fi

# Alter the behaviour of 'mkdir' command if '-v' flag was specified
if [[ $VERBOSE_FLAG -eq 1 ]]; then
	MKDIR="mkdir -v"
else
	MKDIR="mkdir"
fi

# Create the Lesson layout
$MKDIR $NUM
$MKDIR $NUM/Examples
$MKDIR $NUM/Exercises
$MKDIR $NUM/Theory
$MKDIR $NUM/Whiteboard
$MKDIR $NUM/Programs
$MKDIR $NUM/Homework

figlet -c "$(whoami) Lesson $NUM" | lolcat

exit 0
