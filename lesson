#!/bin/bash

usage()
{
    echo -e "Generates a default directory structure for a lesson.\n"
    echo "Usage:"
    echo -e "  lesson [options] <command> <lesson_num>\n"
    echo "Arguments:"
    echo "  command                     name of the command"
    echo "  lesson_num                  the lesson number"
    echo ""
    echo "Options:"
    echo "  -f, --force                 disable warnings"
    echo "  -h, --help                  displays a usage message"
    echo "  -m <lang>, --make <lang>    creates a makefile inside of each directory"
    echo ""
    echo "Commands:"
    echo "  begin, start                creates the directories for the lesson"
    echo "  end, finish                 removes unused directories for the lesson"
    echo "  help                        displays a help message"
    echo ""
    echo "Examples:"
    echo "  lesson begin 1"
    echo "  lesson end 1"
    echo ""
    echo "Author:"
    echo "  Artyom Daniov"
}

declare -A FLAGS=(
    [force]=0  # -f, --force
    [make]=""  # -m, --make
)

declare -A COMMANDS=(
    [begin]=0  # begin
    [end]=0    # end
)

# Returns 0 if $1 is a script command
is_command()
{
    for com in "${!COMMANDS[@]}"; do
        if [[ "$com" == "$1" ]]; then
            return 0
        fi
    done
    return 1
}

## GLOBAL VARIABLES

MAX_LESSON_NUM=100
LESSONS_DIR="Lessons"
LESSON_DIRECTORIES=(Examples Exercises Theory Whiteboard Programs
                    Homework Todo Ideas)

HELP_MESSAGE="Try: 'lesson -h | --help' for more information"
MAKEFILE="Makefile"
MIN_COMMIT_MESSAGE_LENGTH=20

## PARSE OPTIONS

short_options="fhm:"
long_options="force,help,make:"

options=$(getopt -o $short_options -l $long_options -- "$@")

if [[ $? -ne 0 ]]; then
    echoerr $HELP_MESSAGE
    exit 1
fi

eval set -- "$options"  # sets $options as script arguments

## SET OPTIONS

while true; do
    case $1 in
        -f | --force)
            FLAGS[force]=1
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        -m | --make)
            shift
            if [[ $1 == "c" || $1 == "cpp" ]]; then
                FLAGS[make]=$1
            elif is_command $1; then
                echoerr "Error: '-m, --make' option requires an argument."
                echoerr $HELP_MESSAGE
                exit 1
            else
                echoerr "Error: '$1' makefile is not supported."
                echoerr "Supported makefiles: c, cpp"
                echoerr $HELP_MESSAGE
                exit 1
            fi
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done

## VALIDATION

# Check the <command> and <lesson_num> arguments are given
if [[ $# -lt 2 ]]; then
    echoerr "Error: missing <command> <lesson_num> arguments"
    echoerr $HELP_MESSAGE
    exit 1
fi

## SET COMMAND

# Check the <command> argument is valid
case $1 in
    begin | start)
        FLAGS[begin]=1
        shift ;;
    end | finish)
        FLAGS[end]=1
        shift ;;
    help)
        usage
        exit 0 ;;
    *)
        echoerr "Error: unknown command '$1'"
        echoerr $HELP_MESSAGE
        exit 1 ;;
esac

## VALIDATION

# Check if <lesson_num> argument is a positive number
if ! isuint $1; then
    echoerr "Error: <lesson_num> argument must be an integer"
    echoerr "Fix: Try 1..$MAX_LESSON_NUM"
    exit 1
fi

# Check if <lesson_num> argument is less than or equal MAX_LESSON_NUM
if [[ ! "$1" -le $MAX_LESSON_NUM ]]; then
    if [[ ${FLAGS[force]} -ne 1 ]]; then
        echo "$1 exceeds the MAX_LESSON_NUM"
        read -p "Proceed? [y/n]: " ans
        if [[ ! "$ans" =~ ^[yY]$ ]]; then
            exit 0
        fi
    fi
fi

# Check if inside of LESSONS_DIR directory
if [[ ! "$(pwd)" =~ .+/$LESSONS_DIR$ ]]; then
    if [[ ${FLAGS[force]} -ne 1 ]]; then
        echo "Not inside '$LESSONS_DIR' directory"
        read -p "Proceed? [y/n]: " ans
        if [[ ! "$ans" =~ ^[yY]$ ]]; then
            exit 0
        fi
    fi
fi

## MAIN JOB

if [[ ${FLAGS[begin]} -eq 1 ]]; then

    ## PRECAUTIONS

    # Check if there is a Lesson with number <lesson_num>
    if [[ -d $1 ]]; then
        echoerr "Error: Lesson number '$1' already exists"
        echoerr "Fix: Try another number"
        exit 1
    fi

    ## CREATE DIRECTORIES

    for dir in ${LESSON_DIRECTORIES[@]}; do
        mkdir -p $1/$dir
    done

    ## MAKEFILE

    # Check if $MAKEFILE_FLAG is on
    if [[ -n ${FLAGS[make]} ]]; then

        # Check that 'new' script is installed
        if [[ ! -x $(command -v new) ]]; then
            echoerr "Error: command not found 'new'"
            echoerr "Fix: run the 'install' script"
            exit 1
        fi

        # In each $dir create a Makefile
        for dir in ${LESSON_DIRECTORIES[@]}; do
            new --make=$MAKEFILE_FLAG $1/$dir/$MAKEFILE
        done
    fi

    # Create a time-stamp file
    touch $1/.lesson_start

    ## BEGIN SCREEN

    columns=$(tput cols)
    printf "%0.s-" $(seq 1 $columns)
    echo ""
    echo ""
    echoc "Welcome to Lesson #$1, $(whoami)!"
    echo ""
    echoc "Remember to express your ideas:"
    echo ""
    echoc " 1. Correctly"
    echo ""
    echoc " 2. Simply"
    echo ""
    echoc " 3. Efficiently"
    echo ""
    printf "%0.s-" $(seq 1 $columns)

elif [[ ${FLAGS[end]} -eq 1 ]]; then

    ## PRECAUTIONS

    # Check if there is no lesson with number <lesson_num>
    if [[ ! -d $1 ]]; then
        echoerr "Error: Lesson number '$1' doesn't exist"
        exit 1
    fi

    ## REMOVE EMPTY DIRECTORIES

    for dir in ${LESSON_DIRECTORIES[@]}; do

        # If $dir exists and $dir is empty
        if [[ -d $1/$dir ]] && isempty $1/$dir; then
            rm -r $1/$dir

        # If $dir only has a $MAKEFILE inside
        elif [[ -f $1/$dir/$MAKEFILE && $(filenum $1/$dir) -eq 1 ]]; then
            rm -r $1/$dir
        fi

    done

    ## TIME STATS

    if [[ -f $1/.lesson_start ]]; then

        duration=$(( $(date +%s) - $(stat -c "%Y" $1/.lesson_start) ))
        hours=$(( duration / 3600 ))
        minutes=$(( duration / 60 - hours * 60))
        seconds=$(( duration % 60 ))

        # Delete a time-stamp file
        rm $1/.lesson_start

    fi

    ## FILE STATS

    exercises_completed=0
    programs_written=0

    for dir in ${LESSON_DIRECTORIES[@]}; do
        if [[ -d $1/$dir ]]; then
            case $dir in
                Exercises | Programs)
                for file in $(ls $1/$dir); do
                    if [[ "$(file $1/$dir/$file)" =~ "C source" ||
                          "$(file $1/$dir/$file)" =~ "Python script" ]]; then
                        if [[ $dir == "Exercises" ]]; then
                            exercises_completed=$(( exercises_completed + 1 ))
                        elif [[ $dir == "Programs" ]]; then
                            programs_written=$(( programs_written + 1 ))
                        fi
                    fi
                done
                ;;
            esac
        fi
    done

    ## GIT

    # If git repo and changes were made
    if [[ -d ".git" && -n $(git status --porcelain) ]]; then

        git status
        git add .

        while true; do
            read -r -p "Enter commit message: " message

            if [[ ${#message} -lt $MIN_COMMIT_MESSAGE_LENGTH ]]; then
                echoerr "Error: commit message must be at least" \
                        "$MIN_COMMIT_MESSAGE_LENGTH characters long"
                continue
            fi

            break
        done

        git commit -m "$message"
        git push

    fi

    ## END SCREEN

    columns=$(tput cols)
    printf "%0.s-" $(seq 1 $columns)
    echo ""
    echoc "End of lesson #$1. Goodbye, $(whoami)!"
    echo ""
    echoc "Stats:"
    echo ""
    echoc " 1. Lesson took $hours:$minutes:$seconds"
    echo ""
    echoc " 2. Exercises completed: $exercises_completed"
    echo ""
    echoc " 3. Programs written: $programs_written"
    echo ""
    printf "%0.s-" $(seq 1 $columns)

    # If no files were created, remove the lesson dir as well
    if isempty $1; then
        rmdir $1
    fi

fi

exit 0
