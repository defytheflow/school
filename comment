#!/bin/bash

# TODO:
#     1) Make it more intelligent, suggesting how the comment should look.
#        For now only recognizes a comment that has a 'space/*space' on the
#        first line.

BASH_LIB=~/.bash_lib

HEAD_LINES=1

# How to use this script
usage() {
	echo "Checks if a c-source file has got a multi-line comment at the top."
	echo ""
	echo -e "  /*\n   * What your program does.\n   */"
	echo ""
	echo "Usage:"
	echo "  comment [options] <c_source_file> [c_source_file...]"
	echo ""
	echo "Options:"
	echo "  -h, --help    shows a help message"
	echo ""
	echo "Dependencies:"
	echo "  ~/.bash_lib"
}

# Import code from ~/.bash_lib file
if [[ -f $BASH_LIB ]]; then
	. $BASH_LIB
else
	echo "Unable to find '$BASH_LIB' file. Please install it and run again"
	exit 1
fi

# Check if an option was provided
for arg in $@; do
	if [[ "$arg" =~ ^-[-]?[a-zA-Z]+$ ]]; then
		case $arg in
			-h | --help )
				usage
				exit 0
				;;
			* )
				fatal_error "Unknown option $(reversed $arg)"
				;;
		esac
	fi
done

# Check if at least 1 <c_source_file> argument was given
if [[ $# -lt 1 ]]; then
	usage
	echo ""
	fatal_error "Missing <c_source_file> argument"
fi

# The main job starts here

# For each <c_source_file> argument
for arg in $@; do

	# Check if <c_source_file> ends with '.c'
	if [[ ! "$arg" =~ .+\.c$ ]]; then
		error "$(reversed $arg) must end with '.c'"
		continue
	fi

	# Check if <c_source_file> exists
	if [[ ! -f $arg ]]; then
		error "file $(reversed $arg) doesn't exist"
		continue
	fi

	# Check if <c_source_file> is indeed c-source code
	if [[ ! "$(file $arg)" =~ ^.+C[[:space:]]source.+$ ]]; then
			error "$(reversed $arg) is not a c-source file"
			continue
	fi

	# Check that multi-line comment is present in the first $HEAD_LINES
	if [[ ! "$(head -$HEAD_LINES $arg)" =~ ^[[:space:]]*/\*[[:space:]]*$ ]]; then
			error "No comment found at the top of $(reversed $arg) file"
	fi

done

