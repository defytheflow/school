#!/bin/bash

usage()
{
    echo -e "Installs packages for coding lessons.\n"

    echo    "Usage:"
    echo -e "  install [options]\n"

    echo    "Options:"
    echo    "  -a, --all         install all."
    echo    "  -c, --c           install C packages."
    echo    "  -d, --dot         download and set up 'dotfiles' repository."
    echo    "  -f, --fun         install programs for fun."
    echo    "  -h, --help        display a usage message."
    echo    "  -p, --python      install python packages."
    echo    "  -S, --sdk         download and set up scripts from 'sdk' repo."
    echo -e "  -s, --school      set up scripts and libs from 'school' repo.\n"

    echo    "Author:"
    echo -e "  Artyom Danilov\n"
}

# ------------------------------------------------------------------- #
#                          Global variables                           #
# ------------------------------------------------------------------- #

SHORT_OPTS="acdfhpSs"
LONG_OPTS="all,dotfiles,fun,help,python,school,sdk"
GITHUB="https://github.com/defytheflow"

declare -A FLAGS=(
    [all]=0   # -a, --all
    [c]=0     # -c
    [dot]=0   # -d, --dot
    [fun]=0   # -f, --fun
    [py]=0    # -p, --python
    [sdk]=0   # -S, --sdk
    [schl]=0  # -s, --school
)

declare -A GIT_REPOS=(
    [dot]="$GITHUB/dotfiles.git"
    [sdk]="$GITHUB/sdk.git"
    [pylib]="$GITHUB/pylib.git"
)

declare -A PY_PACKAGES=(
    ["python3"]="python3"
    ["pip3"]="python3-pip"
    ["ipython"]="ipython"
    ["pylint3"]="pylint3"
)

PIP_PACKAGES=("ipython")
FUN_PROGS=(figlet lolcat cowsay cmatrix fortune rig)

ESSENTIALS=(git vim tmux tree)
COMPLEMENTS=(howdoi)

# ------------------------------------------------------------------- #
#                           Functions                                 #
# ------------------------------------------------------------------- #

install_from_array() {

    local progs=($@)
    for prog in "${progs[@]}"; do
        printf "%-60s" "  Checking that'$prog' is installed."
        if [[ ! -x $(command -v "$prog") ]]; then
            echo "  Installing '$prog'..."
            yes | sudo apt-get install "$prog"
            clear
        else
            printf "%10s\n" "[ OK ]"
        fi
    done

}

install_from_dict() {

    local -n progs=$1
    for prog in "${!progs[@]}"; do
        printf "%-60s" "  Checking that'$prog' is installed."
        if [[ ! -x $(command -v "$prog") ]]; then
            echo "  Installing '$prog'..."
            yes | sudo apt-get install "${progs[$prog]}"
            clear
        else
            printf "%10s\n" "[ OK ]"
        fi
    done

}

# ------------------------------------------------------------------- #
#                           Validation                                #
# ------------------------------------------------------------------- #

# Display a usage message if no options given
if [[ $# -eq 0 ]]; then
    usage
    exit 0
fi

# ------------------------------------------------------------------- #
#                           Parse options                             #
# ------------------------------------------------------------------- #

ARGV=$(getopt -o $SHORT_OPTS -l $LONG_OPTS -- "$@")

if [[ $? -ne 0 ]]; then
    echo "Try 'install -h | --help' for more information." >&2
    exit 1
fi

eval set -- "$ARGV"

# ------------------------------------------------------------------- #
#                           Toggle options                            #
# ------------------------------------------------------------------- #

while true; do
    case "$1" in
        -a | --all)
            FLAGS[all]=1    ;;
        -c | --c)
            FLAGS[c]=1      ;;
        -d | --dot)
            FLAGS[dot]=1    ;;
        -f | --fun)
            FLAGS[fun]=1    ;;
        -h | --help)
            usage
            exit 0            ;;
        -p | --python)
            FLAGS[py]=1     ;;
        -S | --sdk)
            FLAGS[sdk]=1    ;;
        -s | --school)
            FLAGS[schl]=1   ;;
        --)
            shift
            break             ;;
    esac
    shift
done

# ------------------------------------------------------------------- #
#                           Validation                                #
# ------------------------------------------------------------------- #

# Check internet connection
echo "Checking your internet connection."
if ! wget -q --spider https://google.com; then
    echoerr "Error: no internet connection"
    exit 1
fi
echo ""

# ------------------------------------------------------------------- #
#                          System update                              #
# ------------------------------------------------------------------- #

# TESTS: ubuntu - OK, wsl - OK
read -rep "Update system? [y/n]: " ans
if [[ "$ans" =~ ^[yY]$ ]]; then

    echo "Updating packages list..."
    yes | sudo apt-get update
    echo "Upgrading packages..."
    yes | sudo apt-get upgrade
    echo "Removing no longer needed packages..."
    yes | sudo apt-get autoremove
    echo "Running dpkg --configure -a"
    # WSL always asks to run this command, without it fails to install
    sudo dpkg --configure -a > /dev/null 2>&1
    clear

fi
echo ""

# ------------------------------------------------------------------- #
#                       Default installation                          #
# ------------------------------------------------------------------- #

echo "ESSENTIALS"
install_from_array "${ESSENTIALS[@]}"
echo ""

echo "COMPLEMENTS"
install_from_array "${COMPLEMENTS[@]}"
echo ""

# ------------------------------------------------------------------- #
#                                C                                    #
# ------------------------------------------------------------------- #

# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[c]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then

    echo "C PACKAGES"
    printf "%-60s" "  Checking that 'build-essential' package is insalled."
    if ! dpkg -s build-essential > /dev/null 2>&1; then
        echo "Installing the 'build-essential package'"
        yes | sudo apt-get install build-essential
        clear
    else
        printf "%10s\n" "[ OK ]"
    fi

    echo "  Setting up C 'school' library..."

    # TODO add call to makefile for installation

    sudo ldconfig # So that library changes took place
    echo ""
fi

# ------------------------------------------------------------------- #
#                              DOT                                    #
# ------------------------------------------------------------------- #

# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[dot]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then
    echo "DOTFILES"
    echo "  Downloading 'dotfiles' repository from git..."
    git clone "${GIT_REPOS[dot]}" > /dev/null 2>&1

    echo "  Setting up 'dotfiles'..."
    shopt -s dotglob
    find dotfiles/bash -maxdepth 1 -type f -exec mv -i {} "$HOME" \;
    find dotfiles/ -maxdepth 1 -type f -exec mv -i {} "$HOME" \;
    rm -rf dotfiles
    echo ""
fi

# ------------------------------------------------------------------- #
#                              FUN                                    #
# ------------------------------------------------------------------- #

# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[fun]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then
    echo "FUN PROGRAMS"
    install_from_array "${FUN_PROGS[@]}"
    echo ""
fi

# ------------------------------------------------------------------- #
#                             PYTHON                                  #
# ------------------------------------------------------------------- #

# TESTS: ubuntu - OK, wsl - BUG on ipython
if [[ ${FLAGS[py]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then

    echo "PYTHON PACKAGES"
    install_from_dict PY_PACKAGES
    echo ""

    echo "PIP PACKAGES"
    for package in "${PIP_PACKAGES[@]}"; do
        printf "%-60s" "  Checking that '$package' is installed."
        if ! pip3 show "$package" > /dev/null; then
            echo -e "\nInstalling '$package'..."
            pip3 install "$package" > /dev/null
        else
            printf "%10s\n" "[ OK ]"
        fi
    done
    echo ""

    echo "  Setting up Python 'school' library..."
    if [[ ! -d $HOME/.lib ]]; then
        mkdir "$HOME/.lib"
    fi

    git clone "${GIT_REPOS[pylib]}" > /dev/null 2>&1
    cp -i pylib/*.py "$HOME/.lib"
    rm -rf pylib
    echo ""

fi

# ------------------------------------------------------------------- #
#                              SDK                                    #
# ------------------------------------------------------------------- #

# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[sdk]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then

    echo "SDK"
    echo "  Downloading 'sdk' repository from git..."
    git clone "${GIT_REPOS[sdk]}" > /dev/null 2>&1

    echo "  Setting up 'sdk' scripts..."

    # 'new' script
    if [[ ! -d /usr/share/templates ]]; then
        sudo mkdir /usr/share/templates
    elif ! isempty /usr/share/templates; then
        sudo rm /usr/share/templates/*
    fi

    # TODO  call makefile from sdk repository
    sudo cp sdk/templates/* /usr/share/templates/
    sudo cp -i sdk/new   /usr/local/bin

    # 'clean' script
    sudo cp -i sdk/clean /usr/local/bin
    rm -rf sdk
    echo ""

fi

# ------------------------------------------------------------------- #
#                           SCHOOL                                    #
# ------------------------------------------------------------------- #

# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[schl]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then

    echo "SCHOOL"
    echo "  Setting up 'school' scripts..."
    sudo cp -i lesson /usr/local/bin  # 'lesson' script
    echo ""

fi

echo "You are good to go!"

exit 0
