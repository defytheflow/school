#!/bin/bash

usage() {
    echo -e "Installs scripts, packages and programs for coding lessons.\n"
    echo "Usage:"
    echo -e "  install [options]\n"
    echo "Options:"
    echo "  -a    install all"
    echo "  -c    install C packages"
    echo "  -d    download and set up 'dotfiles' repository"
    echo "  -f    install programs for fun"
    echo "  -h    display a usage message"
    echo "  -j    install javascript packages"
    echo "  -P    install programs for productivity"
    echo "  -p    install python packages"
    echo "  -S    download and set up scripts from 'sdk' repository"
    echo "  -s    set up scripts and libs from 'school' repository"
    echo ""
    echo "Author:"
    echo -e "  Artyom Danilov\n"
}

# -a
ALL_FLAG=0
# -c
C_FLAG=0
# -d
DOT_FLAG=0
DOTFILES_GIT_REPO="https://github.com/defytheflow/dotfiles.git"
# -f
FUN_FLAG=0
FUN_PROGS=(figlet lolcat cowsay cmatrix fortune rig)
# -j
JS_FLAG=0
declare -A JS_PACKAGES=(
    ["npm"]="npm"
)
# -P
PROD_FLAG=0
declare -A PROD_PROGS=(
    ["gtypist"]="gtypist"
    ["youtube-dl"]="youtube-dl"
)
# -p
PY_FLAG=0
declare -A PY_PACKAGES=(
    ["python3"]="python3"
    ["pip3"]="python3-pip"
    ["ipython"]="ipython"
    ["pylint"]="pylint"
)
PIP_PACKAGES=("ipython")
# -S
SDK_FLAG=0
SDK_GIT_REPO="https://github.com/defytheflow/sdk.git"
# -s
SCHL_FLAG=0

ESSENTIALS=(git vim tmux tree)
COMPLEMENTS=(howdoi)

install_from_array() {

    local progs=($@)
    for prog in ${progs[@]}; do
        printf "%-60s" "  Checking that'$prog' is installed."
        # echo -n "  Checking that '$prog' is installed."
        if [[ ! -x $(command -v $prog) ]]; then
            echo "  Installing '$prog'..."
            yes | sudo apt-get install $prog
            clear
        else
            printf "%10s\n" "[ OK ]"
        fi
    done

}

install_from_dict() {

    local -n progs=$1
    for prog in "${!progs[@]}"; do
        printf "%-60s" "  Checking that'$prog' is installed."
        if [[ ! -x $(command -v $prog) ]]; then
            echo "  Installing '$prog'..."
            yes | sudo apt-get install ${progs[$prog]}
            clear
        else
            printf "%10s\n" "[ OK ]"
        fi
    done

}

# Display a usage message if no options given
if [[ $# -eq 0 ]]; then
    usage
    exit 0
fi

# Parse options
while getopts ":acdfhjPpSs" opt; do
    case $opt in
        a)
            ALL_FLAG=1 ;;
        c)
            C_FLAG=1 ;;
        d)
            DOT_FLAG=1 ;;
        f)
            FUN_FLAG=1 ;;
        h)
            usage
            exit 0 ;;
        j)
            JS_FLAG=1 ;;
        P)
            PROD_FLAG=1 ;;
        p)
            PY_FLAG=1 ;;
        S)
            SDK_FLAG=1 ;;
        s)
            SCHL_FLAG=1 ;;
        \?)
            usage
            echoerr "Error: unknown option '$OPTARG'"
            exit 1 ;;
    esac
done

# Check internet connection
echo "Checking your internet connection."
wget -q --spider https://google.com
if [[ $? -ne 0 ]]; then
    echoerr "Error: no internet connection"
    exit 1
fi
echo ""

# Ask to update the system
# TESTS: ubuntu - OK, wsl - OK
echo -n "Update packages? [y/n]: "
read ans
if [[ "$ans" =~ ^[yY]$ ]]; then

    echo "Updating packages list..."
    yes | sudo apt-get update
    echo "Upgrading packages..."
    yes | sudo apt-get upgrade
    echo "Removing no longer needed packages..."
    yes | sudo apt-get autoremove
    echo "Running dpkg --configure -a"
    # WSL always asks to run this command, without it fails to install
    sudo dpkg --configure -a > /dev/null 2>&1
    clear

fi
echo ""


echo "ESSENTIALS"
install_from_array ${ESSENTIALS[@]}
echo ""

echo "COMPLEMENTS"
install_from_array ${COMPLEMENTS[@]}
echo ""

# '-c' Install C programs and packages
# TESTS: ubuntu - OK, wsl - OK
if [[ $C_FLAG -eq 1 || $ALL_FLAG -eq 1 ]]; then

    echo "C PACKAGES"
    printf "%-60s" "  Checking that 'build-essential' package is insalled."
    if ! dpkg -s build-essential > /dev/null 2>&1; then
        echo "Installing the 'build-essential package'"
        yes | sudo apt-get install build-essential
        clear
    else
        printf "%10s\n" "[ OK ]"
    fi

    echo "  Setting up C 'school' library..."
    # C - library
    sudo cp -i includes/school.h /usr/local/include

    # Compile school lib
    gcc lib/school.c -c -fPIC > /dev/null
    gcc school.o -shared -o libschool.so
    rm school.o

    # Set up C school lib
    sudo mv -i libschool.so /usr/local/lib
    if [[ -f libschool.so ]]; then
        rm libschool.so
    fi
    # So that library changes took place
    sudo ldconfig
    echo ""
fi

# '-d' - Download dotfiles
# TESTS: ubuntu - OK, wsl - OK
if [[ $DOT_FLAG -eq 1 || $ALL_FLAG -eq 1 ]]; then
    echo "DOTFILES"
    echo "  Downloading 'dotfiles' repository from git..."
    git clone $DOTFILES_GIT_REPO > /dev/null 2>&1

    echo "  Setting up 'dotfiles'..."
    shopt -s dotglob
    find dotfiles -maxdepth 1 -type f -exec mv -i {} $HOME \;
    rm -rf dotfiles
    echo ""
fi

# '-f' - Install fun programs
# TESTS: ubuntu - OK, wsl - OK
if [[ $FUN_FLAG -eq 1 || $ALL_FLAG -eq 1 ]]; then
    echo "FUN PROGRAMS"
    install_from_array ${FUN_PROGS[@]}
    echo ""
fi

# '-j' - Install JavaScript packages
# TESTS: ubuntu - OK, wsl - OK
if [[ $JS_FLAG -eq 1 || $ALL_FLAG -eq 1 ]]; then
    echo "JAVA SCRIPT PACKAGES"
    install_from_dict JS_PACKAGES
    echo ""
fi

# '-P' - Install programs for productivity
# TESTS: ubuntu - OK, wsl - OK
if [[ $PROD_FLAG -eq 1 || $ALL_FLAG -eq 1 ]]; then
    echo "PRODUCTIVITY PROGRAMS"
    install_from_dict PROD_PROGS
    echo ""
fi

# '-p' - Install python packages - TESTED on wsl
# TESTS: ubuntu - OK, wsl - BUG on ipython
if [[ $PY_FLAG -eq 1 || $ALL_FLAG -eq 1 ]]; then

    echo "PYTHON PACKAGES"
    install_from_dict PY_PACKAGES
    echo ""

    echo "PIP PACKAGES"
    for package in ${PIP_PACKAGES[@]}; do
        printf "%-60s" "  Checking that '$package' is installed."
        if ! pip3 show $package > /dev/null; then
            echo "Installing '$package'..."
            pip3 install $package > /dev/null
        else
            printf "%10s\n" "[ OK ]"
        fi
    done
    echo ""

    echo "  Setting up Python 'school' library..."
    if [[ ! -d $HOME/.lib ]]; then
        mkdir $HOME/.lib
    fi
    cp -i lib/school.py $HOME/.lib
    echo ""

fi

# '-S' - Download and set up scripts from 'sdk' repository
# TESTS: ubuntu - OK, wsl - OK
if [[ $SDK_FLAG -eq 1 || $ALL_FLAG -eq 1 ]]; then

    echo "SDK"
    echo "  Downloading 'sdk' repository from git..."
    git clone $SDK_GIT_REPO > /dev/null 2>&1

    echo "  Setting up 'sdk' scripts..."

    # 'new' script
    if [[ -d $HOME/.templates ]]; then
        rm -rf $HOME/.templates
    fi
    cp -r sdk/templates $HOME/.templates
    sudo cp -i sdk/new   /usr/local/bin

    # 'clean' script
    sudo cp -i sdk/clean /usr/local/bin
    rm -rf sdk
    echo ""

fi

# '-s' - Set up Scripts from 'school' repository
# TESTS: ubuntu - OK, wsl - OK
if [[ $SCHL_FLAG -eq 1 || $ALL_FLAG -eq 1 ]]; then

    echo "SCHOOL"
    echo "  Setting up 'school' scripts..."

    # 'lesson' script
    sudo cp -i lesson /usr/local/bin
    echo ""

fi

echo "You are good to go!"

exit 0
