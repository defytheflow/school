#!/bin/bash

usage() {
    echo -e "Installs scripts, packages and programs for coding lessons.\n"
    echo "Usage:"
    echo -e "  install [options]\n"
    echo "Options:"
    echo "  -a, --all         install all."
    echo "  -c                install C packages."
    echo "  -d, --dotfiles    download and set up 'dotfiles' repository."
    echo "  -f, --fun         install programs for fun."
    echo "  -h, --help        display a usage message."
    echo "  -j, --js          install javascript packages."
    echo "  -P, --product     install programs for 'productivity'."
    echo "  -p, --python      install python packages."
    echo "  -S, --sdk         download and set up scripts from 'sdk' repo."
    echo "  -s, --school      set up scripts and libs from 'school' repo."
    echo ""
    echo "Author:"
    echo -e "  Artyom Danilov\n"
}

declare -A FLAGS=(
    [all]=0   # -a, --all
    [c]=0     # -c
    [dot]=0   # -d, --dotfiles
    [fun]=0   # -f, --fun
    [js]=0    # -j, --js
    [prod]=0  # -P, --product
    [py]=0    # -p, --python
    [sdk]=0   # -S, --sdk
    [schl]=0  # -s, --school
)

declare -A GIT_REPOS=(
    [dot]="https://github.com/defytheflow/dotfiles.git"
    [sdk]="https://github.com/defytheflow/sdk.git"
)

declare -A JS_PACKAGES=(
    ["npm"]="npm"
)

declare -A PY_PACKAGES=(
    ["python3"]="python3"
    ["pip3"]="python3-pip"
    ["ipython"]="ipython"
    ["pylint3"]="pylint3"
)

declare -A PROD_PROGS=(
    ["gtypist"]="gtypist"
    ["youtube-dl"]="youtube-dl"
)

PIP_PACKAGES=("ipython")
FUN_PROGS=(figlet lolcat cowsay cmatrix fortune rig)

ESSENTIALS=(git vim tmux tree)
COMPLEMENTS=(howdoi)

install_from_array() {

    local progs=($@)
    for prog in ${progs[@]}; do
        printf "%-60s" "  Checking that'$prog' is installed."
        # echo -n "  Checking that '$prog' is installed."
        if [[ ! -x $(command -v $prog) ]]; then
            echo "  Installing '$prog'..."
            yes | sudo apt-get install $prog
            clear
        else
            printf "%10s\n" "[ OK ]"
        fi
    done

}

install_from_dict() {

    local -n progs=$1
    for prog in "${!progs[@]}"; do
        printf "%-60s" "  Checking that'$prog' is installed."
        if [[ ! -x $(command -v $prog) ]]; then
            echo "  Installing '$prog'..."
            yes | sudo apt-get install ${progs[$prog]}
            clear
        else
            printf "%10s\n" "[ OK ]"
        fi
    done

}

# Display a usage message if no options given
if [[ $# -eq 0 ]]; then
    usage
    exit 0
fi

# Parse options
short_options="acdfhjPpSs"
long_options="all,dotfiles,fun,help,js,product,python,school,sdk"

options=$(getopt -o $short_options -l $long_options -- "$@")

if [[ $? -ne 0 ]]; then
    echoerr "Try 'install -h | --help' for more information."
    exit 1
fi

eval set -- "$options"  # sets $options as script arguments

# Set options
while true; do
    case "$1" in
        -a | --all)
            FLAGS[all]=1    ;;
        -c)
            FLAGS[c]=1      ;;
        -d | --dotfiles)
            FLAGS[dot]=1    ;;
        -f | --fun)
            FLAGS[fun]=1    ;;
        -h | --help)
            usage
            exit 0            ;;
        -j | --js)
            FLAGS[js]=1     ;;
        -P | --product)
            FLAGS[prod]=1   ;;
        -p | --python)
            FLAGS[py]=1     ;;
        -S | --sdk)
            FLAGS[sdk]=1    ;;
        -s | --school)
            FLAGS[schl]=1   ;;
        --)
            shift
            break             ;;
    esac
    shift
done

# Check internet connection
echo "Checking your internet connection."
wget -q --spider https://google.com
if [[ $? -ne 0 ]]; then
    echoerr "Error: no internet connection"
    exit 1
fi
echo ""

# Ask to update the system
# TESTS: ubuntu - OK, wsl - OK
echo -n "Update system? [y/n]: "
read ans
if [[ "$ans" =~ ^[yY]$ ]]; then

    echo "Updating packages list..."
    yes | sudo apt-get update
    echo "Upgrading packages..."
    yes | sudo apt-get upgrade
    echo "Removing no longer needed packages..."
    yes | sudo apt-get autoremove
    echo "Running dpkg --configure -a"
    # WSL always asks to run this command, without it fails to install
    sudo dpkg --configure -a > /dev/null 2>&1
    clear

fi
echo ""

echo "ESSENTIALS"
install_from_array ${ESSENTIALS[@]}
echo ""

echo "COMPLEMENTS"
install_from_array ${COMPLEMENTS[@]}
echo ""

# '-c' Install C programs and packages
# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[c]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then

    echo "C PACKAGES"
    printf "%-60s" "  Checking that 'build-essential' package is insalled."
    if ! dpkg -s build-essential > /dev/null 2>&1; then
        echo "Installing the 'build-essential package'"
        yes | sudo apt-get install build-essential
        clear
    else
        printf "%10s\n" "[ OK ]"
    fi

    echo "  Setting up C 'school' library..."
    # C - library
    sudo cp -i includes/school.h /usr/local/include

    # Compile school lib
    gcc lib/school.c -c -fPIC > /dev/null
    gcc school.o -shared -o libschool.so
    rm school.o

    # Set up C school lib
    sudo mv -i libschool.so /usr/local/lib
    if [[ -f libschool.so ]]; then
        rm libschool.so
    fi
    # So that library changes took place
    sudo ldconfig
    echo ""
fi

# '-d' - Download dotfiles
# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[dot]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then
    echo "DOTFILES"
    echo "  Downloading 'dotfiles' repository from git..."
    git clone ${GIT_REPOS[dot]} > /dev/null 2>&1

    echo "  Setting up 'dotfiles'..."
    shopt -s dotglob
    find dotfiles/public -maxdepth 1 -type f -exec mv -i {} $HOME \;
    rm -rf dotfiles
    echo ""
fi

# '-f' - Install fun programs
# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[fun]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then
    echo "FUN PROGRAMS"
    install_from_array ${FUN_PROGS[@]}
    echo ""
fi

# '-j' - Install JavaScript packages
# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[js]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then
    echo "JAVA SCRIPT PACKAGES"
    install_from_dict JS_PACKAGES
    echo ""
fi

# '-P' - Install programs for productivity
# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[prod]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then
    echo "PRODUCTIVITY PROGRAMS"
    install_from_dict PROD_PROGS
    echo ""
fi

# '-p' - Install python packages - TESTED on wsl
# TESTS: ubuntu - OK, wsl - BUG on ipython
if [[ ${FLAGS[py]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then

    echo "PYTHON PACKAGES"
    install_from_dict PY_PACKAGES
    echo ""

    echo "PIP PACKAGES"
    for package in ${PIP_PACKAGES[@]}; do
        printf "%-60s" "  Checking that '$package' is installed."
        if ! pip3 show $package > /dev/null; then
            echo -e "\nInstalling '$package'..."
            pip3 install $package > /dev/null
        else
            printf "%10s\n" "[ OK ]"
        fi
    done
    echo ""

    echo "  Setting up Python 'school' library..."
    if [[ ! -d $HOME/.lib ]]; then
        mkdir $HOME/.lib
    fi
    cp -i lib/school.py $HOME/.lib
    cp -i lib/utils.py $HOME/.lib
    echo ""

fi

# '-S' - Download and set up scripts from 'sdk' repository
# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[sdk]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then

    echo "SDK"
    echo "  Downloading 'sdk' repository from git..."
    git clone ${GIT_REPOS[sdk]} > /dev/null 2>&1

    echo "  Setting up 'sdk' scripts..."

    # 'new' script
    if [[ ! -d /usr/share/templates ]]; then
        sudo mkdir /usr/share/templates
    elif ! isempty /usr/share/templates; then
        sudo rm /usr/share/templates/*
    fi

    sudo cp sdk/templates/* /usr/share/templates/
    sudo cp -i sdk/new   /usr/local/bin

    # 'clean' script
    sudo cp -i sdk/clean /usr/local/bin
    rm -rf sdk
    echo ""

fi

# '-s' - Set up Scripts from 'school' repository
# TESTS: ubuntu - OK, wsl - OK
if [[ ${FLAGS[schl]} -eq 1 || ${FLAGS[all]} -eq 1 ]]; then

    echo "SCHOOL"
    echo "  Setting up 'school' scripts..."
    sudo cp -i lesson /usr/local/bin  # 'lesson' script
    echo ""

fi

echo "You are good to go!"

exit 0
