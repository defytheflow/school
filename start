#!/bin/bash

# Installs all the required files, packages and programs for the lessons.

# Usage: start [--python|--py|-p] [-c] [--nolang]

# - 0. Updates the system.
# - 1. Installs git.
# - 2. Downloads the dotfiles.
# - 3. Setups backup directories for vim and emacs.
# - 4. Installs fun programs (figlet, lolcat, etc).
# - 5. Depending on the first argument installs specific programs.

# --python|--py|-p

# - 0. Install python3
# - 1. Install pip3
# - 2. Install ipython

# -c

# - 0. install build-essential package

NOLANG_FLAG=0
PYTHON_FLAG=0
C_FLAG=0

# Check what language option was used
if [[ $# -ne 1 ]]; then
    echo "Usage: start [--python|--py|-p] [-c] [--nolang]"
    exit 1
else
    case $1 in
	--nolang)
	    NOLANG_FLAG=1
	    ;;
	--python | --py | -p)
	    PYTHON_FLAG=1
	    ;;
	-c)
	    C_FLAG=1
	    ;;
	*)
	    echo "Usage: start [--python|--py|-p] [-c] [--nolang]"
	    exit 1
    esac
fi

# Update the system
echo "Updating the system..."
yes | sudo apt update
yes | sudo apt upgrade

# Check if git is installed
if [[ ! -x "$(command -v git)" ]]; then
    echo -n "git is not installed. Installing..."
    sudo apt-get install git > /dev/null 2>&1
fi

# Download the dotfiles repository
DOTFILES_GIT_REPO="https://github.com/defytheflow/dotfiles.git"

echo "Downloading the 'dotfiles' repository from git..."
git clone $DOTFILES_GIT_REPO > /dev/null 2>&1

# Move the dotfiles to home directory
echo "Setting up the dotfiles..."
DOTFILES=(".vimrc" ".emacs" ".tmux.conf" ".bash_aliases" ".bash_lib")

for file in ${DOTFILES[@]}; do
    mv dotfiles/$file $HOME
done
rm -rf dotfiles

# Create directories for backup files
echo "Making sure that backup directories exist..."
BACKUP_DIRECTORIES=($HOME/.backup $HOME/.backup/vim $HOME/.backup/emacs)

for dir in ${BACKUP_DIRECTORIES[@]}; do
    if [[ ! -d $dir ]]; then
	mkdir $dir
    fi
done

# Install fun programs
FUN_PROGRAMS=(figlet lolcat cowsay cmatrix fortune rig)

for program in "${FUN_PROGRAMS[@]}"; do
	if [[ ! -x "$(command -v $program)" ]]; then
		echo "Installing '$program'..."
		sudo apt-get install $program > /dev/null 2>&1
	fi
done

# Based on the flag install programs
if [[ $PYTHON_FLAG -eq 1 ]]; then
	
	PYTHON_PROGRAMS=("python3" "pip3")
	for program in ${PYTHON_PROGRAMS[@]}; do
		if [[ ! -x "$(command -v $program)" ]]; then
			echo "Installing '$program'..."
			sudo apt-get install $program > /dev/null 2>&1
		fi
	done

	PIP_PACKAGES=("ipython")
	for package in ${PIP_PACKAGES[@]}; do
		echo "Installing '$package'..."
		pip3 install $package > /dev/null 2>&1
	done

elif [[ $C_FLAG -eq 1 ]]; then
	
	C_PACKAGES=("build-essential")
	for package in ${C_PACKAGES[@]}; do
		echo "Installing '$package'..."
		sudo apt-get install build-essential
	done

fi

echo "You are good to go!"

exit 0
